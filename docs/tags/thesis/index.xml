<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thesis on </title>
    <link>/tags/thesis/</link>
    <description>Recent content in Thesis on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 May 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/thesis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Converting scientific reviews to EPUB</title>
      <link>/2018/05/07/epub-reviews/</link>
      <pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/07/epub-reviews/</guid>
      <description>First, check on PubMed Central Convert the HTML page to EPUB Clean up the HTML before conversion  Compiling several reviews into one EPUB document VPN, paywall and Pandoc Limitations Methods  Other EPUB resources Loose Ends by Sidney Brenner   Edit Apr 6 2019: Added the compilation of Loose Ends columns by Sidney Brenner.
Third post on the series of “Things I did instead of writing my thesis to help me write my thesis”: how to find/convert reviews in the EPUB format to read in an ebook reader.</description>
    </item>
    
    <item>
      <title>Additional checks for a LaTeX manuscript</title>
      <link>/2018/04/18/check-latex-pub/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/18/check-latex-pub/</guid>
      <description>To continue on the series of “Things I did instead of writing my thesis to help me write my thesis”, another Python script that reads a LaTeX manuscript and helps check that everything is fine. More specifically, the checkLatex.py script (on GitHub) will:
List missing references. List multi-references to reorder. List duplicated labels. List labels that don’t start by fig: or tab:. List figures/tables that are not in order. List ?</description>
    </item>
    
    <item>
      <title>Checking text similarity between two documents</title>
      <link>/2018/04/16/text-similarity/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/04/16/text-similarity/</guid>
      <description>To start the series of “Things I did instead of writing my thesis to help me write my thesis”, a small Python script that compares two text documents and output similar parts. I did that to avoid auto-plagiarism of my manuscripts’ introduction in the main thesis introduction.
It’s a very naive approach but sped up the checking process (maybe worth the time). It first looks for short exact matches between the two documents, then extends these exact matches and uses the difflib module to keep text with a minimum similarity score (default 80%).</description>
    </item>
    
  </channel>
</rss>